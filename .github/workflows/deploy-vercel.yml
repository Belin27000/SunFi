name: Deploy Frontend to Vercel
env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

on:
  pull_request:
    branches:
      - 'main'
  push:
    branches:
      - 'main'

jobs:
  deploy:
    name: Deploy to Vercel
    runs-on: ubuntu-latest

    steps:
      # Étape 1 : Clone du dépôt
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Étape 2 : Configuration de Node.js
      - name: Setup Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: 20

      # Étape 3 : Cache des modules Node.js
      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Étape 4 : Accéder au repertoire du frontend
      - name: Navigate to Frontend Directory
        run: cd frontend/sunfi-app
      
      # Étape 5 : Installer les dépendances
      - name: Install Dependencies
        working-directory: frontend/sunfi-app
        run: npm install
        
        # Étape 6 : Installer la CLI Vercel
      - name: Install Vercel CLI
        working-directory: frontend/sunfi-app
        run: npm install --global vercel@latest
        
        # Étape 7 : Pull Vercel Environment Information
      - name: Pull Vercel Environment Information
        working-directory: frontend/sunfi-app
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
          
        # Étape 8 : Construire le projet
      - name: Build Project Artifacts
        working-directory: frontend/sunfi-app
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        
        # Étape 9 : Déployer sur Vercel
      - name: Deploy Project Artifacts to Vercel
        working-directory: frontend/sunfi-app
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}